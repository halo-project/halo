
stages:
  - build
  - test
  - bench
  - release

variables:
  GIT_SUBMODULE_STRATEGY: normal  # no need to download benchmarks here, otherwise we'd go recursive.
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

before_script:
  - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  - git submodule sync llvm-project
  - git submodule update --init llvm-project
  - git submodule sync rllib
  - git submodule update --init rllib

build:
  stage: build
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

test:
  stage: test
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --cap-add sys_admin -w /tmp/halo $CONTAINER_TEST_IMAGE ./test.sh docker

mini-bench:
  stage: bench
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --privileged -w /tmp/halo $CONTAINER_TEST_IMAGE ./minibench.sh test

release-image:
  stage: release
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - master
